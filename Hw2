##8. String to Integer (atoi) - python

class Solution(object):
    def myAtoi(self, s):
        """
        :type s: str
        :rtype: int
        """
        i = 0
        res = 0
        negative = 1

        # Skip leading whitespaces
        while i < len(s) and s[i] == ' ':
            i += 1

        # Check for sign
        if i < len(s) and s[i] == '-':
            i += 1
            negative = -1
        elif i < len(s) and s[i] == '+':
            i += 1

        # Process digits
        checker = set('0123456789')
        while i < len(s) and s[i] in checker:
            res = res * 10 + int(s[i])
            i += 1

        # Apply sign
        res = res * negative

        # Check for overflow
        if res < 0:
            return max(res, -2**31)
        return min(res, 2**31 - 1)


##424. Longest Repeating Character Replacement - python

class Solution(object):
    def characterReplacement(self, s, k):
        """
        :type s: str
        :type k: int
        :rtype: int
        """
        counts = [0] * 26  # Assuming only uppercase English letters are present
        max_count = 0
        left = 0
        output = 0

        for right in range(len(s)):
            counts[ord(s[right]) - ord('A')] += 1
            max_count = max(max_count, counts[ord(s[right]) - ord('A')])

            if (right - left + 1) - max_count > k:
                counts[ord(s[left]) - ord('A')] -= 1
                left += 1

            output = max(output, right - left + 1)

        return output

##336. Palindrome Pairs

class Solution:
    def palindromePairs(self, words: List[str]) -> List[List[int]]:
        def isPal(w, st, end):
            while st < end:
                if w[st] != w[end]:
                    return False
                st += 1
                end -= 1
            return True
        
        N = len(words)
        output = []

        lookup = {w: i for i, w in enumerate(words)}
        for i in range(N):
            w = words[i]
            if w == "":
                for j in range(N):
                    if i != j and isPal(words[j], 0, len(words[j]) - 1):
                        output.append([i, j])
                        output.append([j, i])
                continue
            bw = w[::-1]
            if bw in lookup and lookup[bw] != i:
                output.append([i, lookup[bw]])
            for k in range(1, len(w)):
                if isPal(w, 0, k - 1) and w[k:][::-1] in lookup:
                    output.append([lookup[w[k:][::-1]], i])
                if isPal(w, k, len(w) - 1) and w[:k][::-1] in lookup:
                    output.append([i, lookup[w[:k][::-1]]])
        return output
