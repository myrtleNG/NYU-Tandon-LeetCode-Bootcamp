##236. Lowest Common Ancestor of a Binary Tree

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        self.ans = None

        def dfs(node):
            if not node:
                return False
            left = dfs(node.left)
            right = dfs(node.right)
            cur = node == p or node == q
            if (left and right) or (cur and right) or (cur and left):  # corrected 'rihgt' to 'right', 'ot' to 'or'
                self.ans = node
                return True  # corrected 'return' instead of 'returning'
            return left or right or cur

        dfs(root)
        return self.ans


##139. Word Break
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        queue = collections.deque([s])
        visited = set()

        while queue:
            word = queue.popleft()

            if word in visited:
                continue
            else:
                if not word:
                    return True

                visited.add(word)

                for start_word in wordDict:
                    if word.startswith(start_word):
                        queue.append(word[len(start_word):])

        return False
            
##215. Kth Largest Element in an Array
class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        pivot = random.choice(nums)
        left = [x for x in nums if x > pivot]  
        mid = [x for x in nums if x == pivot]  
        right = [x for x in nums if x < pivot]  

        L, M = len(left), len(mid)
        
        if k <= L:
            return self.findKthLargest(left, k)
        elif k > L + M:
            return self.findKthLargest(right, k - (L + M))
        else:
            return mid[0]






  
