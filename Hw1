## 217. Contains Duplicate - python 3
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        return len(set(nums)) != len(nums)


## 1024. Video Stitching - python 3
class Solution:
    def videoStitching(self, clips: list[list[int]], time: int) -> int:

        # Sort the clips by the start time
        clips.sort()
        
        # Use two pointers
        end, newEnd, requiredClips = 0, 0, 0
        
        # iterator
        i = 0

        # Iterate through the sorted clips, and for each group of clips that start 
        # before or at the current end, update newEnd to be the maximum of the current newEnd 
        # and the clip's end time.
        while i < len(clips) and end < time:
        # While there are clips and the end of last selected clip is less than T
            while i < len(clips) and clips[i][0] <= end:
                # Extend the farthest reach within the current interval
                newEnd = max(newEnd, clips[i][1])
                i += 1
        
            if end == newEnd:
                return -1  # Cannot extend the coverage
            end = newEnd  # Extend the interval to the farthest reach
            requiredClips += 1  # One more clip is used
    
        return requiredClips if end >= time else -1    


## 11. Container With Most Water - python

class Solution(object):
    def maxArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
     # pointers one start from the left and one from the right
        left_pointer, right_pointer = 0, len(height) - 1
        # max_area to store the maximum area
        max_area = 0
        
        while left_pointer < right_pointer:
            # Calculate the area with the current left and right
            max_area = max(max_area, min(height[left_pointer], height[right_pointer]) * (right_pointer - left_pointer))
            # Move the pointer with the smaller height
            if height[left_pointer] < height[right_pointer]:
                left_pointer += 1
            else:
                right_pointer -= 1
        
        return max_area
