## 230. Kth Smallest Element in a BST
class Solution:
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        array = []

        def inorder(node):
            if not node:
                return

            inorder(node.left)
            array.append(node.val)
            inorder(node.right)

        inorder(root)

        return array[k-1]

## 329. Longest Increasing Path in a Matrix
class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        if not matrix or not matrix[0]:
            return 0

        M, N = len(matrix), len(matrix[0])
        dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        visited = {}

        def dfs(r, c):
            if (r, c) in visited:
                return visited[(r, c)]

            max_length = 1
            for dr, dc in dirs:
                new_r, new_c = r + dr, c + dc
                if 0 <= new_r < M and 0 <= new_c < N and matrix[new_r][new_c] > matrix[r][c]:
                    max_length = max(max_length, dfs(new_r, new_c) + 1)

            visited[(r, c)] = max_length
            return max_length

        longest_path = 0
        for r in range(M):
            for c in range(N):
                longest_path = max(longest_path, dfs(r, c))

        return longest_path

## 199. Binary Tree Right Side View
class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        l = defaultdict(int)
        def dfs(node,h):
            if not node: return
            if h not in l:
                l[h] = node.val
            dfs(node.right,h+1)
            dfs(node.left,h+1)

        dfs(root,0)

        return l.values()
