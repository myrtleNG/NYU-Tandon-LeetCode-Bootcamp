## 53. Maximum Subarray

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        # Check if the input list is empty
        if not nums:
            return 0
        
        # Initialize variables
        answer = nums[0]  # Initialize answer with the first element
        temp_sum = nums[0]  # Initialize temporary sum with the first element
        
        # Iterate through the list starting from the second element
        for i in range(1, len(nums)):
            # Update temporary sum to be the maximum of continuing the current subarray
            # or starting a new subarray with the current element nums[i]
            temp_sum = max(temp_sum + nums[i], nums[i])
            
            # Update answer to be the maximum found so far
            answer = max(answer, temp_sum)
        
        return answer

  ## 322.Coin change
  class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        m, n = len(coins), amount
        f = [[inf] * (n + 1) for _ in range(m + 1)]
        f[0][0] = 0
        for i, x in enumerate(coins, 1):
            for j in range(n + 1):
                f[i][j] = f[i - 1][j]
                if j >= x:
                    f[i][j] = min(f[i][j], f[i][j - x] + 1)
        return -1 if f[m][n] >= inf else f[m][n]


## 416. Partition Equal Subset Sum

class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        m, mod = divmod(sum(nums), 2)
        if mod:
            return False
        n = len(nums)
        f = [[False] * (m + 1) for _ in range(n + 1)]
        f[0][0] = True
        for i, x in enumerate(nums, 1):
            for j in range(m + 1):
                f[i][j] = f[i - 1][j] or (j >= x and f[i - 1][j - x])
        return f[n][m]
